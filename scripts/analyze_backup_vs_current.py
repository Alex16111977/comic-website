#!/usr/bin/env python
"""
–ê–ù–ê–õ–Ü–ó: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è backup_mnemo –∑ –ø–æ—Ç–æ—á–Ω–∏–º html_lira.py
"""
from pathlib import Path
import difflib

print("=" * 70)
print("–ü–û–†–Ü–í–ù–Ø–ù–ù–Ø: html_lira.py.backup_mnemo VS html_lira.py")
print("=" * 70)

backup_file = Path(r"F:\AiKlientBank\KingLearComic\generators\html_lira.py.backup_mnemo")
current_file = Path(r"F:\AiKlientBank\KingLearComic\generators\html_lira.py")

if not backup_file.exists():
    print("‚ùå Backup —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    exit(1)

if not current_file.exists():
    print("‚ùå –ü–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    exit(1)

# –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª–∏
with open(backup_file, 'r', encoding='utf-8') as f:
    backup_content = f.read()

with open(current_file, 'r', encoding='utf-8') as f:
    current_content = f.read()

print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print(f"Backup —Ä–æ–∑–º—ñ—Ä: {len(backup_content)} —Å–∏–º–≤–æ–ª—ñ–≤")
print(f"–ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {len(current_content)} —Å–∏–º–≤–æ–ª—ñ–≤")
print(f"–†—ñ–∑–Ω–∏—Ü—è: {len(current_content) - len(backup_content)} —Å–∏–º–≤–æ–ª—ñ–≤")

# –ö–ª—é—á–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
print("\nüîç –ö–õ–Æ–ß–û–í–Ü –ï–õ–ï–ú–ï–ù–¢–ò –í BACKUP:")
print("-" * 60)

key_elements = {
    "–í—Å—Ç–∞–≤–∫–∞ –º–Ω–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫–∏ –ø—ñ—Å–ª—è exercises": "# –í—Å—Ç–∞–≤–ª—è—î–º–æ HTML —Å–µ–∫—Ü—ñ—ó –º–Ω–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫–∏" in backup_content,
    "–ü–æ—à—É–∫ exercises-container": "'exercises-container' in html" in backup_content,
    "–ü–æ—à—É–∫ bottom-nav": "'bottom-nav' in html" in backup_content,
    "–í—Å—Ç–∞–≤–∫–∞ –º—ñ–∂ exercises —Ç–∞ nav": "html[:exercises_pos]" in backup_content,
    "mnemo_vocabulary –≤—Å—Ç–∞–≤–∫–∞": "mnemo_vocabulary" in backup_content,
    "mnemo_quiz –≤—Å—Ç–∞–≤–∫–∞": "mnemo_quiz" in backup_content,
    "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–Ω–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫–∏": "self.mnemo_gen.generate_" in backup_content
}

for element, exists in key_elements.items():
    print(f"  {'‚úÖ' if exists else '‚ùå'} {element}")

print("\nüîç –ö–õ–Æ–ß–û–í–Ü –ï–õ–ï–ú–ï–ù–¢–ò –í –ü–û–¢–û–ß–ù–û–ú–£:")
print("-" * 60)

key_elements_current = {
    "exercises_pattern –≤–∏–∑–Ω–∞—á–µ–Ω–æ": "exercises_pattern = " in current_content,
    "–í—Å—Ç–∞–≤–∫–∞ articles_quiz": "{articles_quiz}" in current_content,
    "generate_vocabulary_cards –º–µ—Ç–æ–¥": "def generate_vocabulary_cards" in current_content,
    "–°—Ç–∞—Ä–∏–π –∫–æ–¥ –≤–∏–º–∫–Ω–µ–Ω–æ (if False)": "if False:" in current_content,
    "–í–∏–¥–∞–ª–µ–Ω–∏–π —Å—Ç–∞—Ä–∏–π –±–ª–æ–∫": "# –°–¢–ê–†–ò–ô –ö–û–î –í–ò–ú–ö–ù–ï–ù–û" in current_content
}

for element, exists in key_elements_current.items():
    print(f"  {'‚úÖ' if exists else '‚ùå'} {element}")

# –ó–Ω–∞–π–¥–µ–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ
print("\nüî¥ –ö–†–ò–¢–ò–ß–ù–Ü –í–Ü–î–ú–Ü–ù–ù–û–°–¢–Ü:")
print("-" * 60)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ç–æ–¥—É generate_journey
import re

# –í backup
backup_journey = re.search(r'def generate_journey\(self.*?\n(?=    def|\Z)', backup_content, re.DOTALL)
# –í current  
current_journey = re.search(r'def generate_journey\(self.*?\n(?=    def|\Z)', current_content, re.DOTALL)

if backup_journey and current_journey:
    backup_lines = backup_journey.group().count('\n')
    current_lines = current_journey.group().count('\n')
    
    print(f"–ú–µ—Ç–æ–¥ generate_journey:")
    print(f"  Backup: {backup_lines} —Ä—è–¥–∫—ñ–≤")
    print(f"  Current: {current_lines} —Ä—è–¥–∫—ñ–≤")
    print(f"  –†—ñ–∑–Ω–∏—Ü—è: {current_lines - backup_lines} —Ä—è–¥–∫—ñ–≤")
    
    # –©–æ –≤—Ç—Ä–∞—á–µ–Ω–æ –∑ backup
    if "exercises_pos = html.find('exercises-container')" in backup_journey.group():
        print("\n‚úÖ BACKUP –ú–ê–Ñ: –ü–æ—à—É–∫ –ø–æ–∑–∏—Ü—ñ—ó exercises-container")
    
    if "html[:exercises_pos]" in backup_journey.group():
        print("‚úÖ BACKUP –ú–ê–Ñ: –í—Å—Ç–∞–≤–∫—É –º–Ω–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é")
    
    # –©–æ –¥–æ–¥–∞–Ω–æ –≤ current
    if "exercises_pattern = " in current_journey.group():
        print("\n‚ùå CURRENT –ó–ê–ú–Ü–ù–ò–í: –ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –Ω–∞ pattern matching")
    
    if "if exercises_pattern in html:" in current_journey.group():
        print("‚ùå CURRENT –ü–†–û–ë–õ–ï–ú–ê: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ pattern, –∞–ª–µ –Ω–µ –ø–æ–∑–∏—Ü—ñ—ó")

print("\n" + "=" * 70)
print("üìä –í–ò–°–ù–û–í–û–ö:")
print("-" * 60)
print("""
–ü–†–û–ë–õ–ï–ú–ê –ù–ê –ö–†–û–¶–Ü 5:

–í BACKUP (backup_mnemo) –±—É–ª–∞ –ü–†–ê–í–ò–õ–¨–ù–ê –ª–æ–≥—ñ–∫–∞:
1. –ó–Ω–∞—Ö–æ–¥–∏–ª–∞ –ø–æ–∑–∏—Ü—ñ—é exercises-container
2. –í—Å—Ç–∞–≤–ª—è–ª–∞ –º–Ω–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫—É –ü–Ü–°–õ–Ø exercises –ø–µ—Ä–µ–¥ bottom-nav
3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞ –ø–æ–∑–∏—Ü—ñ–π–Ω—É –≤—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ html[:pos]

–í CURRENT (–ø—ñ—Å–ª—è –∫—Ä–æ–∫—É 5) –ª–æ–≥—ñ–∫–∞ –ó–õ–ê–ú–ê–ù–ê:
1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î pattern matching –∑–∞–º—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π
2. –í–∏–¥–∞–ª–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–Ω–∏–π –∫–æ–¥ –ø–æ–∑–∏—Ü—ñ–π–Ω–æ—ó –≤—Å—Ç–∞–≤–∫–∏
3. –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –∫–æ–¥, —è–∫–∏–π –Ω–µ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ

–†–Ü–®–ï–ù–ù–Ø: –ü–æ—Ç—Ä—ñ–±–Ω–æ –í–Ü–î–ù–û–í–ò–¢–ò –∫–æ–¥ –∑ backup_mnemo
–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –ø–æ–∑–∏—Ü—ñ–π–Ω–æ—é –≤—Å—Ç–∞–≤–∫–æ—é –º–Ω–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫–∏!
""")

# –ü–æ–∫–∞–∂–µ–º–æ –∫—Ä–∏—Ç–∏—á–Ω–∏–π –∫–æ–¥ –∑ backup
print("\nüîß –ö–†–ò–¢–ò–ß–ù–ò–ô –ö–û–î –ó BACKUP, –Ø–ö–ò–ô –ü–û–¢–†–Ü–ë–ù–û –í–Ü–î–ù–û–í–ò–¢–ò:")
print("-" * 60)

critical_section = re.search(
    r'# –í—Å—Ç–∞–≤–ª—è—î–º–æ HTML —Å–µ–∫—Ü—ñ—ó –º–Ω–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫–∏.*?else:\s+print\(f"\[ERROR\]',
    backup_content,
    re.DOTALL
)

if critical_section:
    print("```python")
    print(critical_section.group()[:500], "...")
    print("```")
