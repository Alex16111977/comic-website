#!/usr/bin/env python
"""
–ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É - —â–æ –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫
"""
from pathlib import Path
import json

print("=" * 70)
print("–ê–ù–ê–õ–Ü–ó –í–ò–ö–û–ù–ê–ù–ù–Ø –ü–†–û–ú–ü–¢–£ - –©–û –ü–Ü–®–õ–û –ù–ï –¢–ê–ö")
print("=" * 70)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–æ–∫—ñ–≤ –ø—Ä–æ–º–ø—Ç—É
steps_status = {}

print("\nüìã –ö–†–û–ö 1: –ê–ù–ê–õ–Ü–ó –ü–û–¢–û–ß–ù–û–ì–û –°–¢–ê–ù–£")
print("-" * 60)
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç
diagnose_script = Path(r"F:\AiKlientBank\KingLearComic\scripts\diagnose_current_state.py")
if diagnose_script.exists():
    print("‚úÖ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    steps_status["step1"] = True
else:
    print("‚ùå –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –ù–ï —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    steps_status["step1"] = False

print("\nüìã –ö–†–û–ö 2: –û–ù–û–í–õ–ï–ù–ù–Ø mnemonics_gen.py")
print("-" * 60)
mnemo_file = Path(r"F:\AiKlientBank\KingLearComic\generators\mnemonics_gen.py")
if mnemo_file.exists():
    with open(mnemo_file, 'r', encoding='utf-8') as f:
        content = f.read()
        
    checks = {
        "generate_articles_quiz –∑ phase_id": "def generate_articles_quiz(self, vocabulary, phase_id=None)" in content or "def generate_articles_quiz(self, character, phase_id=None)" in content,
        "get_phase_vocabulary –º–µ—Ç–æ–¥": "def get_phase_vocabulary" in content,
        "–†–æ—Å—ñ–π—Å—å–∫–∞ –º–æ–≤–∞ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ": "–ê—Ä—Ç–∏–∫–ª–∏ –∏ —Ä–æ–¥" in content or "üéØ –ê—Ä—Ç–∏–∫–ª–∏ –∏ —Ä–æ–¥" in content,
        "–í–∏–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å" in content
    }
    
    for check, status in checks.items():
        print(f"  {'‚úÖ' if status else '‚ùå'} {check}: {status}")
    
    steps_status["step2"] = all(checks.values())
else:
    print("‚ùå –§–∞–π–ª mnemonics_gen.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    steps_status["step2"] = False

print("\nüìã –ö–†–û–ö 3: –û–ù–û–í–õ–ï–ù–ù–Ø html_lira.py")
print("-" * 60)
html_lira = Path(r"F:\AiKlientBank\KingLearComic\generators\html_lira.py")
backup_exists = Path(r"F:\AiKlientBank\KingLearComic\generators\html_lira.py.backup2").exists()

if html_lira.exists():
    with open(html_lira, 'r', encoding='utf-8') as f:
        content = f.read()
    
    checks = {
        "–Ü–º–ø–æ—Ä—Ç MnemonicsGenerator": "from .mnemonics_gen import MnemonicsGenerator" in content,
        "–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è mnemo_gen": "self.mnemo_gen = MnemonicsGenerator" in content,
        "exercises_pattern –≤–∏–∑–Ω–∞—á–µ–Ω–æ": "exercises_pattern = " in content,
        "–í—Å—Ç–∞–≤–∫–∞ –≤–ø—Ä–∞–≤–∏ –≤ exercises": "articles_quiz" in content,
        "generate_vocabulary_cards –º–µ—Ç–æ–¥": "def generate_vocabulary_cards" in content,
        "–ü–∞—Ç—á –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ (backup2)": backup_exists
    }
    
    for check, status in checks.items():
        print(f"  {'‚úÖ' if status else '‚ùå'} {check}: {status}")
    
    steps_status["step3"] = all(checks.values())
else:
    print("‚ùå –§–∞–π–ª html_lira.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    steps_status["step3"] = False

print("\nüìã –ö–†–û–ö 4: CSS –ö–û–õ–¨–û–†–û–í–ê –ö–û–î–ò–†–û–í–ö–ê")
print("-" * 60)
if mnemo_file.exists():
    with open(mnemo_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    css_checks = {
        "is-der –≥—Ä–∞–¥—ñ—î–Ω—Ç": "linear-gradient(135deg, #e3f2fd" in content,
        "is-die –≥—Ä–∞–¥—ñ—î–Ω—Ç": "linear-gradient(135deg, #fce4ec" in content,
        "is-das –≥—Ä–∞–¥—ñ—î–Ω—Ç": "linear-gradient(135deg, #e8f5e9" in content,
        "border-left –¥–ª—è der": "border-left: 4px solid #1976d2" in content,
        "border-left –¥–ª—è die": "border-left: 4px solid #d32f2f" in content,
        "border-left –¥–ª—è das": "border-left: 4px solid #388e3c" in content
    }
    
    for check, status in css_checks.items():
        print(f"  {'‚úÖ' if status else '‚ùå'} {check}: {status}")
    
    steps_status["step4"] = all(css_checks.values())
else:
    steps_status["step4"] = False

print("\nüìã –ö–†–û–ö 5: –§–Ü–ù–ê–õ–¨–ù–ê –ì–ï–ù–ï–†–ê–¶–Ü–Ø")
print("-" * 60)
output_file = Path(r"F:\AiKlientBank\KingLearComic\output\journeys\king_lear.html")
validation_script = Path(r"F:\AiKlientBank\KingLearComic\scripts\final_validation.py")

checks = {
    "king_lear.html –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ": output_file.exists(),
    "final_validation.py —Å—Ç–≤–æ—Ä–µ–Ω–æ": validation_script.exists(),
    "–§–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–µ—â–æ–¥–∞–≤–Ω–æ": output_file.exists() and output_file.stat().st_size > 100000
}

for check, status in checks.items():
    print(f"  {'‚úÖ' if status else '‚ùå'} {check}: {status}")

steps_status["step5"] = all(checks.values())

# –§–Ü–ù–ê–õ–¨–ù–ò–ô –í–ò–°–ù–û–í–û–ö
print("\n" + "=" * 70)
print("üìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ö–û–ù–ê–ù–ù–Ø –ö–†–û–ö–Ü–í:")
print("-" * 60)

total_steps = len(steps_status)
completed = sum(1 for v in steps_status.values() if v)

for step, status in steps_status.items():
    print(f"  {step}: {'‚úÖ –í–ò–ö–û–ù–ê–ù–û' if status else '‚ùå –ù–ï –í–ò–ö–û–ù–ê–ù–û'}")

print(f"\n–í–∏–∫–æ–Ω–∞–Ω–æ –∫—Ä–æ–∫—ñ–≤: {completed}/{total_steps}")

# –ê–ù–ê–õ–Ü–ó –ü–†–û–ë–õ–ï–ú
print("\n" + "=" * 70)
print("üî¥ –í–ò–Ø–í–õ–ï–ù–Ü –ü–†–û–ë–õ–ï–ú–ò:")
print("-" * 60)

if not steps_status.get("step2"):
    print("1. –ö–†–û–ö 2 –ù–ï –ó–ê–í–ï–†–®–ï–ù–û:")
    print("   - –ú–µ—Ç–æ–¥ get_phase_vocabulary –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
    print("   - –†–æ—Å—ñ–π—Å—å–∫–∞ –º–æ–≤–∞ –Ω–µ –¥–æ–¥–∞–Ω–∞ –≤ —à–∞–±–ª–æ–Ω–∏")
    print("   - phase_id –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è")

if not steps_status.get("step3"):
    print("2. –ö–†–û–ö 3 –ù–ï –ó–ê–í–ï–†–®–ï–ù–û:")
    print("   - html_lira.py –Ω–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ")
    print("   - –ü–∞—Ç—á –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∞–±–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —á–∞—Å—Ç–∫–æ–≤–æ")
    print("   - –ú–µ—Ç–æ–¥ generate_vocabulary_cards –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

if not steps_status.get("step4"):
    print("3. –ö–†–û–ö 4 –ù–ï –ó–ê–í–ï–†–®–ï–ù–û:")
    print("   - CSS —Å—Ç–∏–ª—ñ –Ω–µ –¥–æ–¥–∞–Ω—ñ –≤ mnemonics_gen.py")
    print("   - –ì—Ä–∞–¥—ñ—î–Ω—Ç–∏ —Ç–∞ –∫–æ–ª—å–æ—Ä–∏ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")

print("\nüéØ –ì–û–õ–û–í–ù–ê –ü–†–ò–ß–ò–ù–ê –ù–ï–í–î–ê–ß–Ü:")
print("-" * 60)
print("–ü—Ä–æ–º–ø—Ç –≤–∏–∫–æ–Ω—É–≤–∞–≤—Å—è –ß–ê–°–¢–ö–û–í–û - –∫–æ–∂–µ–Ω –∫—Ä–æ–∫ –ø–æ—á–∏–Ω–∞–≤—Å—è, –∞–ª–µ –ù–ï –ó–ê–í–ï–†–®–£–í–ê–í–°–Ø")
print("—á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∞–±–æ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.")
print("\n–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ö–û–ñ–ï–ù –∫—Ä–æ–∫ –ü–û–í–ù–Ü–°–¢–Æ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –¥–æ –∫—ñ–Ω—Ü—è.")
