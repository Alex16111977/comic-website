"""
–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
–î–∞—Ç–∞: 09.01.2025
–ú–µ—Ç–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ russian_hint –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏ –≤ –ø—Ä—è–º–æ–º, –∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
"""

import json
from pathlib import Path

def test_quiz_hints_both_modes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    
    print("[INFO] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã...")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É journey_runtime.js
    runtime_path = Path(r"F:\AiKlientBank\KingLearComic\output\static\js\journey_runtime.js")
    
    if not runtime_path.exists():
        print("[ERROR] –§–∞–π–ª journey_runtime.js –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    content = runtime_path.read_text(encoding='utf-8')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ü–†–Ø–ú–û–ì–û —Ä–µ–∂–∏–º–∞ (DE ‚Üí RU)
    print("[+] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–†–Ø–ú–û–ì–û —Ä–µ–∂–∏–º–∞ (–ù–µ–º–µ—Ü–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π):")
    forward_checks = {
        "generateForwardQuestion —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π": "generateForwardQuestion(word) {",
        "–£—Å–ª–æ–≤–∏–µ –¥–ª—è forward –ø–æ–¥—Å–∫–∞–∑–∫–∏": "if (word.russianHint) {",
        "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π": "¬ª (${word.russianHint})?",
        "russianHint –≤ forward –æ–±—ä–µ–∫—Ç–µ": "russianHint: word.russianHint ||",
    }
    
    forward_ok = True
    for check_name, check_pattern in forward_checks.items():
        if check_pattern in content:
            print(f"    [OK] {check_name}")
        else:
            print(f"    [ERROR] {check_name} - –ù–ï –ù–ê–ô–î–ï–ù–û!")
            forward_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –û–ë–†–ê–¢–ù–û–ì–û —Ä–µ–∂–∏–º–∞ (RU ‚Üí DE)
    print("\n[+] –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–ë–†–ê–¢–ù–û–ì–û —Ä–µ–∂–∏–º–∞ (–†—É—Å—Å–∫–∏–π ‚Üí –ù–µ–º–µ—Ü–∫–∏–π):")
    reverse_checks = {
        "generateReverseQuestion —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π": "generateReverseQuestion(word) {",
        "–£—Å–ª–æ–≤–∏–µ –¥–ª—è reverse –ø–æ–¥—Å–∫–∞–∑–∫–∏": '// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫ –≤–æ–ø—Ä–æ—Å—É –µ—Å–ª–∏ –µ—Å—Ç—å',
        "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –≤ reverse": "¬ª (${word.russianHint})?",
        "russianHint –≤ reverse –æ–±—ä–µ–∫—Ç–µ": "russianHint: word.russianHint ||",
    }
    
    reverse_ok = True
    for check_name, check_pattern in reverse_checks.items():
        if check_pattern in content:
            print(f"    [OK] {check_name}")
        else:
            print(f"    [ERROR] {check_name} - –ù–ï –ù–ê–ô–î–ï–ù–û!")
            reverse_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ renderQuestion
    print("\n[+] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ renderQuestion:")
    render_checks = {
        "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ forward —Ä–µ–∂–∏–º–µ": "if (question.type === 'forward')",
        "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ reverse —Ä–µ–∂–∏–º–µ": "} else { // reverse mode",
        "–°–æ–∑–¥–∞–Ω–∏–µ hint —ç–ª–µ–º–µ–Ω—Ç–∞": "hintSpan.className = 'quiz-hint';",
        "–°—Ç–∏–ª—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)": "hintSpan.style.color = '#7c3aed';",
        "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏": "hintSpan.style.fontSize = '0.9em';",
        "–û—Ç—Å—Ç—É–ø –ø–æ–¥—Å–∫–∞–∑–∫–∏": "hintSpan.style.marginLeft = '8px';",
    }
    
    render_ok = True
    for check_name, check_pattern in render_checks.items():
        if check_pattern in content:
            print(f"    [OK] {check_name}")
        else:
            print(f"    [ERROR] {check_name} - –ù–ï –ù–ê–ô–î–ï–ù–û!")
            render_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º buildPhaseQuizWords
    print("\n[+] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö:")
    if "russianHint: word.russian_hint ||" in content:
        print("    [OK] buildPhaseQuizWords –ø–µ—Ä–µ–¥–∞–µ—Ç russian_hint")
    else:
        print("    [ERROR] buildPhaseQuizWords –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç russian_hint")
        render_ok = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    if forward_ok and reverse_ok and render_ok:
        print("[OK] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("[OK] –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!")
        
        print("\n[+] –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        print("\nüìò –ü–†–Ø–ú–û–ô —Ä–µ–∂–∏–º (DE ‚Üí RU):")
        print("    –í–æ–ø—Ä–æ—Å: –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–º–µ—Ü–∫–æ–µ —Å–ª–æ–≤–æ ¬´der Thron¬ª (—Å–∏–º–≤–æ–ª –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–π –≤–ª–∞—Å—Ç–∏)?")
        print("    ")
        print("    der Thron (—Å–∏–º–≤–æ–ª –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–π –≤–ª–∞—Å—Ç–∏)")
        print("    [–¥–µ—Ä –¢–†–û–ù]")
        print("    ")
        print("    –û —Ç—Ä–æ–Ω      –û –≥–Ω–µ–≤")
        print("    –û –±–µ–∑—É–º–∏–µ   –û –ø—Ä–æ–∫–ª—è—Ç–∏–µ")
        
        print("\nüìó –û–ë–†–ê–¢–ù–´–ô —Ä–µ–∂–∏–º (RU ‚Üí DE):")
        print("    –í–æ–ø—Ä–æ—Å: –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π —Å–ª–æ–≤–æ ¬´—Ç—Ä–æ–Ω¬ª (—Å–∏–º–≤–æ–ª –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–π –≤–ª–∞—Å—Ç–∏)?")
        print("    ")
        print("    —Ç—Ä–æ–Ω (—Å–∏–º–≤–æ–ª –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–π –≤–ª–∞—Å—Ç–∏)")
        print("    ")
        print("    –û der Thron     –û der Zorn")
        print("    –û der Wahnsinn  –û der Fluch")
        
        return True
    else:
        print("[ERROR] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return False

if __name__ == "__main__":
    test_quiz_hints_both_modes()
