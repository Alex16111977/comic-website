/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ
 * –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: –ê—Ä—Ç–∏–∫–ª–∏ –∏ —Ä–æ–¥
 * –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
 */

// ==========================================
// 1. –£–ü–†–ê–ñ–ù–ï–ù–ò–ï "–ê–†–¢–ò–ö–õ–ò –ò –†–û–î"
// ==========================================

function initializeArticlesExercise(container, phaseVocabulary) {
    const section = container.querySelector('.word-families-section');
    if (!section) return;
    
    const content = section.querySelector('.relations-content');
    if (!content) return;
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ —Å –∞—Ä—Ç–∏–∫–ª—è–º–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
    const wordsWithArticles = [];
    if (phaseVocabulary && phaseVocabulary.vocabulary) {
        phaseVocabulary.vocabulary.forEach(word => {
            if (word.german && word.russian) {
                const parts = word.german.split(' ');
                if (parts[0] === 'der' || parts[0] === 'die' || parts[0] === 'das') {
                    wordsWithArticles.push({
                        article: parts[0],
                        german: parts.slice(1).join(' '),
                        russian: word.russian,
                        fullWord: word.german
                    });
                }
            }
        });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    section.dataset.hasContent = wordsWithArticles.length > 0 ? 'true' : 'false';
    
    if (wordsWithArticles.length === 0) {
        content.innerHTML = '<div class="relations-empty-state">–í —ç—Ç–æ–π —Ñ–∞–∑–µ –Ω–µ—Ç —Å–ª–æ–≤ —Å –∞—Ä—Ç–∏–∫–ª—è–º–∏.</div>';
        return;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 9 —Å–ª–æ–≤ –∑–∞ —Ä–∞–∑
    const exerciseWords = wordsWithArticles.slice(0, 9);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    content.innerHTML = `
        <div class="articles-exercise">
            <div class="articles-instruction">–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–ª–æ–≤–∞ –ø–æ —Ä–æ–¥–∞–º, –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—è –∏—Ö –≤ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏</div>
            
            <div class="article-columns">
                <div class="article-column" data-article="der">
                    <h5 class="article-header">DER<br><span>–º—É–∂—Å–∫–æ–π —Ä–æ–¥</span></h5>
                    <div class="article-drop-zone" data-zone="der"></div>
                </div>
                <div class="article-column" data-article="die">
                    <h5 class="article-header">DIE<br><span>–∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥</span></h5>
                    <div class="article-drop-zone" data-zone="die"></div>
                </div>
                <div class="article-column" data-article="das">
                    <h5 class="article-header">DAS<br><span>—Å—Ä–µ–¥–Ω–∏–π —Ä–æ–¥</span></h5>
                    <div class="article-drop-zone" data-zone="das"></div>
                </div>
            </div>
            
            <div class="words-to-sort">
                ${exerciseWords.map((word, idx) => `
                    <div class="article-word-card" 
                         data-article="${word.article}"
                         data-word="${word.german}"
                         data-index="${idx}"
                         draggable="true">
                        <span class="word-german">${word.german}</span>
                        <span class="word-russian">${word.russian}</span>
                    </div>
                `).join('')}
            </div>
            
            <div class="articles-controls">
                <button class="check-articles-btn" type="button">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                <button class="reset-articles-btn" type="button">–°–±—Ä–æ—Å</button>
            </div>
            <div class="articles-feedback"></div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    attachArticlesDragDrop(content);
}

function attachArticlesDragDrop(container) {
    const cards = container.querySelectorAll('.article-word-card');
    const zones = container.querySelectorAll('.article-drop-zone');
    const checkBtn = container.querySelector('.check-articles-btn');
    const resetBtn = container.querySelector('.reset-articles-btn');
    const feedback = container.querySelector('.articles-feedback');
    const wordsContainer = container.querySelector('.words-to-sort');
    
    // Drag and Drop –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    cards.forEach(card => {
        card.addEventListener('dragstart', (e) => {
            e.dataTransfer.setData('article', card.dataset.article);
            e.dataTransfer.setData('word', card.dataset.word);
            e.dataTransfer.setData('index', card.dataset.index);
            card.classList.add('dragging');
        });
        
        card.addEventListener('dragend', () => {
            card.classList.remove('dragging');
        });
        
        // –ö–ª–∏–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        card.addEventListener('click', function() {
            const selected = container.querySelector('.article-word-card.selected');
            if (selected && selected !== this) {
                selected.classList.remove('selected');
            }
            this.classList.toggle('selected');
        });
    });
    
    zones.forEach(zone => {
        zone.addEventListener('dragover', (e) => {
            e.preventDefault();
            zone.classList.add('drag-over');
        });
        
        zone.addEventListener('dragleave', () => {
            zone.classList.remove('drag-over');
        });
        
        zone.addEventListener('drop', (e) => {
            e.preventDefault();
            zone.classList.remove('drag-over');
            
            const word = e.dataTransfer.getData('word');
            const card = container.querySelector(`[data-word="${word}"]`);
            if (card) {
                zone.appendChild(card);
                card.classList.remove('selected');
            }
        });
        
        // –ö–ª–∏–∫ –Ω–∞ –∑–æ–Ω—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        zone.addEventListener('click', function() {
            const selected = container.querySelector('.article-word-card.selected');
            if (selected) {
                this.appendChild(selected);
                selected.classList.remove('selected');
            }
        });
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    if (checkBtn) {
        checkBtn.addEventListener('click', () => {
            let correct = 0;
            let total = 0;
            
            zones.forEach(zone => {
                const targetArticle = zone.dataset.zone;
                const cardsInZone = zone.querySelectorAll('.article-word-card');
                
                cardsInZone.forEach(card => {
                    total++;
                    if (card.dataset.article === targetArticle) {
                        card.classList.add('correct');
                        card.classList.remove('incorrect');
                        correct++;
                    } else {
                        card.classList.add('incorrect');
                        card.classList.remove('correct');
                    }
                });
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∑–æ–Ω–µ
            const unplacedCards = wordsContainer.querySelectorAll('.article-word-card');
            unplacedCards.forEach(card => {
                card.classList.add('unplaced');
                total++;
            });
            
            if (feedback) {
                if (total === 0) {
                    feedback.innerHTML = '<span class="warning">–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º!</span>';
                } else if (correct === total && unplacedCards.length === 0) {
                    feedback.innerHTML = '<span class="success">üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –∞—Ä—Ç–∏–∫–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!</span>';
                } else if (unplacedCards.length > 0) {
                    feedback.innerHTML = `<span class="warning">–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏!</span>`;
                } else {
                    feedback.innerHTML = `<span class="partial">–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${correct} –∏–∑ ${total}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!</span>`;
                }
            }
        });
    }
    
    // –°–±—Ä–æ—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if (resetBtn) {
        resetBtn.addEventListener('click', () => {
            cards.forEach(card => {
                wordsContainer.appendChild(card);
                card.classList.remove('correct', 'incorrect', 'selected', 'unplaced');
            });
            if (feedback) {
                feedback.innerHTML = '';
            }
        });
    }
}

// ==========================================
// 2. –£–ü–†–ê–ñ–ù–ï–ù–ò–ï "–ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ü–ï–†–ï–í–û–î"
// ==========================================

function initializeContextExercise(container, phaseVocabulary) {
    const section = container.querySelector('.collocations-section');
    if (!section) return;
    
    const content = section.querySelector('.relations-content');
    if (!content) return;
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    const contextExercises = [];
    if (phaseVocabulary && phaseVocabulary.vocabulary) {
        phaseVocabulary.vocabulary.forEach((word, idx) => {
            if (word.german && word.russian && word.sentence && word.sentence_translation) {
                // –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–∏–∫–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
                const germanWord = word.german.replace(/^(der|die|das)\s+/, '');
                
                // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞ (—Å —É—á–µ—Ç–æ–º —Å–∫–ª–æ–Ω–µ–Ω–∏–π)
                const wordRoot = germanWord.substring(0, Math.max(4, germanWord.length - 2));
                const germanRegex = new RegExp(wordRoot + '\\w*', 'gi');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
                const matches = word.sentence.match(germanRegex);
                if (matches && matches.length > 0) {
                    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫
                    const germanBlank = word.sentence.replace(matches[0], '_____');
                    
                    contextExercises.push({
                        id: idx,
                        germanWord: word.german,
                        russianWord: word.russian,
                        germanSentence: germanBlank,
                        russianSentence: word.sentence_translation,
                        correctAnswer: word.russian,
                        originalWord: matches[0]
                    });
                }
            }
        });
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    const exercises = contextExercises.slice(0, 5);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    section.dataset.hasContent = exercises.length > 0 ? 'true' : 'false';
    
    if (exercises.length === 0) {
        content.innerHTML = '<div class="relations-empty-state">–í —ç—Ç–æ–π —Ñ–∞–∑–µ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.</div>';
        return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    content.innerHTML = `
        <div class="context-exercises">
            ${exercises.map((ex, idx) => {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                const options = [ex.correctAnswer];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ —Ñ–∞–∑—ã
                const otherWords = phaseVocabulary.vocabulary
                    .filter(w => w.russian && w.russian !== ex.correctAnswer)
                    .map(w => w.russian)
                    .sort(() => Math.random() - 0.5)
                    .slice(0, 3);
                
                // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –∏–∑ —Ñ–∞–∑—ã, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                while (options.length + otherWords.length < 4) {
                    const distractors = ['–≤–ª–∞—Å—Ç—å', '–∫–æ—Ä–æ–Ω–∞', '–∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ', '—Ç—Ä–æ–Ω', '–¥–æ—á—å', '–ª—é–±–æ–≤—å', '–≥–Ω–µ–≤'];
                    const randomDistractor = distractors[Math.floor(Math.random() * distractors.length)];
                    if (!options.includes(randomDistractor) && !otherWords.includes(randomDistractor)) {
                        otherWords.push(randomDistractor);
                    }
                }
                
                options.push(...otherWords.slice(0, 3));
                const shuffledOptions = options.sort(() => Math.random() - 0.5);
                
                return `
                    <div class="context-exercise-card" data-exercise-id="${ex.id}">
                        <div class="exercise-number">–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ${idx + 1}</div>
                        <div class="sentence-german">${ex.germanSentence}</div>
                        <div class="sentence-russian">${ex.russianSentence}</div>
                        <div class="context-question">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞:</div>
                        <div class="context-options">
                            ${shuffledOptions.map((opt, optIdx) => `
                                <button class="context-option" 
                                        type="button"
                                        data-answer="${opt}"
                                        data-correct="${opt === ex.correctAnswer}">
                                    ${opt}
                                </button>
                            `).join('')}
                        </div>
                        <div class="context-feedback"></div>
                    </div>
                `;
            }).join('')}
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    attachContextHandlers(content);
}

function attachContextHandlers(container) {
    const cards = container.querySelectorAll('.context-exercise-card');
    
    cards.forEach(card => {
        const options = card.querySelectorAll('.context-option');
        const feedback = card.querySelector('.context-feedback');
        
        options.forEach(option => {
            option.addEventListener('click', function() {
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
                options.forEach(opt => opt.disabled = true);
                
                if (this.dataset.correct === 'true') {
                    this.classList.add('correct');
                    if (feedback) {
                        feedback.innerHTML = '<span class="success">‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</span>';
                    }
                } else {
                    this.classList.add('incorrect');
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    options.forEach(opt => {
                        if (opt.dataset.correct === 'true') {
                            opt.classList.add('correct');
                        }
                    });
                    if (feedback) {
                        feedback.innerHTML = '<span class="error">‚úó –ù–µ–≤–µ—Ä–Ω–æ. –°–º. –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.</span>';
                    }
                }
            });
        });
    });
}

// ==========================================
// 3. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –£–ü–†–ê–ñ–ù–ï–ù–ò–ô
// ==========================================

function initializeExercises(phaseKey) {
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
    const containers = document.querySelectorAll('.relations-container');
    
    containers.forEach(container => {
        if (container.dataset.phase === phaseKey) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
            const phaseVocabulary = window.phaseVocabularies ? window.phaseVocabularies[phaseKey] : null;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –∞—Ä—Ç–∏–∫–ª—è–º–∏
            initializeArticlesExercise(container, phaseVocabulary);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
            initializeContextExercise(container, phaseVocabulary);
        }
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º runtime
window.initializeExercises = initializeExercises;
